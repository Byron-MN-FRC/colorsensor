// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
//the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.ColorMatch;
import com.revrobotics.ColorMatchResult;
import com.revrobotics.ColorSensorV3;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;
import frc.robot.Constants;

/**
*
*/
public class ControlPanel extends Subsystem {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private WPI_TalonSRX spinMotor;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private final I2C.Port i2cPort = I2C.Port.kOnboard;

  /**
   * A Rev Color Sensor V3 object is constructed with an I2C port as a parameter.
   * The device will be automatically initialized with default parameters.
   */
  private final ColorSensorV3 m_colorSensor = new ColorSensorV3(i2cPort);

  /**
   * A Rev Color Match object is used to register and detect known colors. This
   * can be calibrated ahead of time or during operation.
   * 
   * This object uses a simple euclidian distance to estimate the closest match
   * with given confidence range.
   */
  private final ColorMatch m_colorMatcher = new ColorMatch();

  public enum ControlPanelColor {
    Yellow, Red, Green, Blue
  }

  private static final ControlPanelColor[] colors = ControlPanelColor.values();

  private final boolean debugControlPanel = true;

  /**
   * Note: Any example colors should be calibrated as the user needs, these are
   * here as a basic example.
   */
  private final Color kBlueTarget = ColorMatch.makeColor(0.143, 0.427, 0.429);
  private final Color kGreenTarget = ColorMatch.makeColor(0.197, 0.561, 0.240);
  private final Color kRedTarget = ColorMatch.makeColor(0.561, 0.232, 0.114);
  private final Color kYellowTarget = ColorMatch.makeColor(0.361, 0.524, 0.113);

  public ControlPanel() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    spinMotor = new WPI_TalonSRX(4);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    m_colorMatcher.addColorMatch(kBlueTarget);
    m_colorMatcher.addColorMatch(kGreenTarget);
    m_colorMatcher.addColorMatch(kRedTarget);
    m_colorMatcher.addColorMatch(kYellowTarget);
  }

  @Override
  public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // Set the default command for a subsystem here.
    // setDefaultCommand(new MySpecialCommand());
  }

  @Override
  public void periodic() {
    // Put code here to be run every loop

  }
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

  // Put methods for controlling this subsystem
  // here. Call these from Commands.

  // motor config taken from MotionMagic example at
  // https://github.com/CrossTheRoadElec/Phoenix-Examples-Languages
  public void motorConfig() {
    /* Factory default hardware to prevent unexpected behavior */
    spinMotor.configFactoryDefault();

    /* Configure Sensor Source for Pirmary PID */
    spinMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, Constants.kPIDLoopIdx,
        Constants.kTimeoutMs);

    /**
     * Configure Talon SRX Output and Sesnor direction accordingly Invert Motor to
     * have green LEDs when driving Talon Forward / Requesting Postiive Output Phase
     * sensor to have positive increment when driving Talon Forward (Green LED)
     */
    spinMotor.setSensorPhase(false); // required to stop
    spinMotor.setInverted(false);

    /* Set relevant frame periods to be at least as fast as periodic rate */
    spinMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
    spinMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);

    /* Set the peak and nominal outputs */
    spinMotor.configNominalOutputForward(0, Constants.kTimeoutMs);
    spinMotor.configNominalOutputReverse(0, Constants.kTimeoutMs);
    spinMotor.configPeakOutputForward(1, Constants.kTimeoutMs);
    spinMotor.configPeakOutputReverse(-1, Constants.kTimeoutMs);

    /* Set Motion Magic gains in slot0 - see documentation */
    spinMotor.selectProfileSlot(Constants.kSlotIdx, Constants.kPIDLoopIdx);
    spinMotor.config_kF(Constants.kSlotIdx, Constants.kGains.kF, Constants.kTimeoutMs);
    spinMotor.config_kP(Constants.kSlotIdx, Constants.kGains.kP, Constants.kTimeoutMs);
    spinMotor.config_kI(Constants.kSlotIdx, Constants.kGains.kI, Constants.kTimeoutMs);
    spinMotor.config_kD(Constants.kSlotIdx, Constants.kGains.kD, Constants.kTimeoutMs);
    /* Set acceleration and vcruise velocity - see documentation */
    spinMotor.configMotionCruiseVelocity(15000, Constants.kTimeoutMs);
    spinMotor.configMotionAcceleration(6000, Constants.kTimeoutMs);

    /* Zero the sensor */
    spinMotor.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
  }

  public void spinMotorToEncoder() {
    spinMotor.set(ControlMode.MotionMagic, Constants.kTargetEncoderUnits);
  }

  public Boolean targetEncoderUnits() {
    double currentEncoderUnits = spinMotor.getSelectedSensorPosition(Constants.kPIDLoopIdx);
    if (Math.abs(currentEncoderUnits - Constants.kTargetEncoderUnits) < 3500) {
      return true;
    }
    return false;

  }

  public void spin(double motorSpeed) {
    spinMotor.set(motorSpeed);
  }

  public void spinCount() {
    spinMotor.set(.6);
  }

  public void stop() {
    spinMotor.set(0);
  }

  private ControlPanelColor ReadColorFromSensor(int reqSameColorReads, double confidence) {
    ControlPanelColor initialColor = null;
    ControlPanelColor curColor = null;
    ControlPanelColor colorToReturn = null;
    int maxReadCount = 8; // The maximum number of times we will read the color sensor
    int totCount = 0; // Counter for how many times we have read from the sensor
    int matchCount = 0; // How many times have we matched with a color.

    // We have an initial color, keep matching until we have matched the required
    // same color reads
    // Note that we will stop if totcount >= maxRead count.
    while ((matchCount < reqSameColorReads) && (totCount < maxReadCount)) {
      curColor = ReadColorFromSensor(confidence);
      totCount++;

      // See if the color was switched from what it was. if so, we reset our
      // initialColor to the new color.
      if (curColor != initialColor) {
        initialColor = curColor;
        matchCount = 0;
      } else {
        matchCount++;
      }

      // See if we found a color in under maxReadCount times.
      if ((totCount < maxReadCount) && (matchCount == reqSameColorReads)) {
        colorToReturn = curColor;
      } else {
        colorToReturn = null;
      }
    }

    return colorToReturn;
  }

  private ControlPanelColor ReadColorFromSensor(double confidence) {
    // ControlPanelColor we have read from the sensor
    ControlPanelColor readColor = null;

    // Get the Color from the sensor
    Color detectedColor = m_colorSensor.getColor();
    // String rgb = m_colorSensor.getRawColor().toString();

    // Use the color matcher to determine if we have a match
    ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);

    if (match.confidence >= confidence) {
      if (match.color == kYellowTarget) {
        readColor = ControlPanelColor.Yellow;
      } else if (match.color == kBlueTarget) {
        readColor = ControlPanelColor.Blue;
      } else if (match.color == kGreenTarget) {
        readColor = ControlPanelColor.Green;
      } else if (match.color == kRedTarget) {
        readColor = ControlPanelColor.Red;
      }
    } else {
      System.out.print("The color match confidence (");
      System.out.print(match.confidence);
      System.out.println(") did not meat the required confidence.");
    }

    if (readColor == null) {
      System.out.println("ControlPanelColor ReadColorFromSensor returned null.");
    }

    return readColor;
  }

  private static String getColorName(ControlPanelColor d) {
    return colors[d.ordinal()].name();
  }

  private int colorCount = 0;
  private double requestedRotations = 0;
  private ControlPanelColor startingColor = null;
  private ControlPanelColor prevColor = null;
  public int colorCounterErrorCount = 0;

  public void setStartingPoint(Double rotations) {
    requestedRotations = rotations;
    colorCount = 0;
    startingColor = ReadColorFromSensor(4, 0.80);
    prevColor = null;
  }

  public void colorCounter() {
    // /**
    // * Method used to count how many times the color sensor reads a color Set up
    // to
    // * count when the starting color matches the current color being read, the
    // * current color is equal to Rcolor When Rcolor is equal to previous color do
    // * nothing when Rcolor is equal to starting color, count one rotation color
    // * count is less than or equal to 7
    // */
    ControlPanelColor readColor = ReadColorFromSensor(4, 0.80);

    if (readColor != null) {
      // Is the read color equal to our starting color?
      if (readColor == startingColor) {
        // Did we come from a different color or null (prevColor)
        if (prevColor != readColor) {
          // Increment the color counter
          colorCount++;
        }
        // Keep track of the previously read color.
        prevColor = readColor;
      } else {
        // We were unable to read a color from the sensor
        colorCounterErrorCount++;
      }
    }
  }

  public boolean goalreached() {
    return (colorCount / 2) > requestedRotations;
  }

  private static boolean validNextColor(ControlPanelColor startColor, ControlPanelColor nextColor) {
    int ordinalColorAfterStartColor = (startColor.ordinal() + 1) % 4;

    return (ordinalColorAfterStartColor == nextColor.ordinal());
  }

  ControlPanelColor spinToColorTarget = null;
  public void spinToColorInit(String colorStr){
    // get the first character of the color string.
    char c = colorStr.toUpperCase().charAt(0);

    switch (c) {
      case 'Y' : spinToColorTarget = ControlPanelColor.Yellow;
        break;
      case 'B' : spinToColorTarget = ControlPanelColor.Blue;
        break;
      case 'G' : spinToColorTarget = ControlPanelColor.Green;
        break;
      case 'R' : spinToColorTarget = ControlPanelColor.Red;
        break;
    }
  }
  public boolean spinToColorComplete(){
    ControlPanelColor readColor = ReadColorFromSensor(4, 0.80);
    return (readColor == spinToColorTarget);
  }
}
